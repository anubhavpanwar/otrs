.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Nexmo::SMS::BinaryMessage 3pm"
.TH Nexmo::SMS::BinaryMessage 3pm "2018-07-03" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Nexmo::SMS::BinaryMessage \- Module that respresents a binary message for the Nexmo SMS API!
.SH "VERSION"
.IX Header "VERSION"
version 0.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module simplifies sending \s-1SMS\s0 through the Nexmo \s-1API.\s0
.PP
.Vb 1
\&    use Nexmo::SMS::BinaryMessage;
\&
\&    my $nexmo = Nexmo::SMS::BinaryMessage\->new(
\&        server   => \*(Aqhttp://rest.nexmo.com/sms/json\*(Aq,
\&        username => \*(Aqtestuser1\*(Aq,
\&        password => \*(Aqtestpasswd2\*(Aq,
\&        text     => \*(AqThis is a test\*(Aq,
\&        from     => \*(AqTest02\*(Aq,
\&        to       => \*(Aq452312432\*(Aq,
\&    );
\&        
\&    my $response = $sms\->send || die $sms\->errstr;
\&    
\&    if ( $response\->is_success ) {
\&        print "SMS was sent...\en";
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
create a new object
.PP
.Vb 5
\&    my $message = Nexmo::SMS::BinaryMessage\->new(
\&        server   => \*(Aqhttp://rest.nexmo.com/sms/json\*(Aq,
\&        username => \*(Aqtestuser1\*(Aq,
\&        password => \*(Aqtestpasswd2\*(Aq,
\&    );
.Ve
.PP
This method recognises these parameters:
.PP
.Vb 11
\&    body              => \*(Aqrequired\*(Aq,
\&    udh               => \*(Aqrequired\*(Aq,
\&    type              => \*(Aqrequired\*(Aq,
\&    from              => \*(Aqrequired\*(Aq,
\&    to                => \*(Aqrequired\*(Aq,
\&    server            => \*(Aqrequired\*(Aq,
\&    username          => \*(Aqrequired\*(Aq,
\&    password          => \*(Aqrequired\*(Aq,
\&    status_report_req => \*(Aqoptional\*(Aq,
\&    client_ref        => \*(Aqoptional\*(Aq,
\&    network_code      => \*(Aqoptional\*(Aq,
.Ve
.SS "user_agent"
.IX Subsection "user_agent"
Getter/setter for the user_agent attribute of the object. By default a new
object of LWP::UserAgent is used, but you can use your own class as long as it
is compatible to LWP::UserAgent.
.PP
.Vb 2
\&  $sms\->user_agent( MyUserAgent\->new );
\&  my $ua = $sms\->user_agent;
.Ve
.SS "errstr"
.IX Subsection "errstr"
return the \*(L"last\*(R" error as string.
.PP
.Vb 1
\&    print $sms\->errstr;
.Ve
.SS "send"
.IX Subsection "send"
This actually calls the Nexmo \s-1SMS API.\s0 It returns a Nexmo::SMS::Response object or
\&\f(CW\*(C`undef\*(C'\fR (on failure).
.PP
.Vb 2
\&   my $sms = Nexmo::SMS::BinaryMessage\->new( ... );
\&   $sms\->send or die $sms\->errstr;
.Ve
.SS "check_needed_params"
.IX Subsection "check_needed_params"
This method checks if all needed parameters are passed.
.PP
.Vb 4
\&  my $params_not_ok = Nexmo::SMS::BinaryMessage\->check_needed_params( ... );
\&  if ( $params_not_ok ) {
\&      print "Please check $params_not_ok";
\&  }
.Ve
.SH "Attributes"
.IX Header "Attributes"
These attributes are available for \f(CW\*(C`Nexmo::SMS::TextMessage\*(C'\fR objects:
.IP "\(bu" 4
client_ref
.IP "\(bu" 4
from
.IP "\(bu" 4
network_code
.IP "\(bu" 4
password
.IP "\(bu" 4
server
.IP "\(bu" 4
status_report_req
.IP "\(bu" 4
body
.IP "\(bu" 4
udh
.IP "\(bu" 4
type
.IP "\(bu" 4
to
.IP "\(bu" 4
username
.SH "AUTHOR"
.IX Header "AUTHOR"
Renee Baecker <reneeb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by Renee Baecker.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
